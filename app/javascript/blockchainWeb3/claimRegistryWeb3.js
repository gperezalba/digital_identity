import * as bcWeb3 from './bcWeb3.js';
var Web3 = require('web3');
var web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));

var claimRegistryAbi = [{"constant":false,"inputs":[{"name":"dualHash","type":"bytes32"},{"name":"status","type":"uint8"}],"name":"receiverUpdateClaim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"version","outputs":[{"name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"dataHash","type":"bytes32"},{"name":"status","type":"uint8"}],"name":"subjectUpdateClaim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"previousPublishedVersion","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"issuer","type":"address"},{"name":"dualHash","type":"bytes32"}],"name":"receiverClaimStatus","outputs":[{"name":"exists","type":"bool"},{"name":"status","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"subjectClaimList","outputs":[{"name":"","type":"uint256"},{"name":"","type":"bytes32[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"dataHash","type":"bytes32"},{"name":"URI","type":"string"}],"name":"set","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"subjectStatus","type":"uint8"},{"name":"receiverStatus","type":"uint8"}],"name":"claimStatus","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"subject","type":"address"},{"name":"dataHash","type":"bytes32"}],"name":"subjectClaimStatus","outputs":[{"name":"exists","type":"bool"},{"name":"status","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_previousPublishedVersion","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"hash","type":"bytes32"},{"indexed":false,"name":"status","type":"uint8"}],"name":"ClaimUpdated","type":"event"}];

export function deployClaimRegistry (prevVersion){
  var _previousPublishedVersion = prevVersion;/* var of type address here */
  var alastriaclaimregistryContract = web3.eth.contract([{"constant":false,"inputs":[{"name":"dualHash","type":"bytes32"},{"name":"status","type":"uint8"}],"name":"receiverUpdateClaim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"version","outputs":[{"name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"dataHash","type":"bytes32"},{"name":"status","type":"uint8"}],"name":"subjectUpdateClaim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"previousPublishedVersion","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"issuer","type":"address"},{"name":"dualHash","type":"bytes32"}],"name":"receiverClaimStatus","outputs":[{"name":"exists","type":"bool"},{"name":"status","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"subjectClaimList","outputs":[{"name":"","type":"uint256"},{"name":"","type":"bytes32[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"dataHash","type":"bytes32"},{"name":"URI","type":"string"}],"name":"set","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"subjectStatus","type":"uint8"},{"name":"receiverStatus","type":"uint8"}],"name":"claimStatus","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"subject","type":"address"},{"name":"dataHash","type":"bytes32"}],"name":"subjectClaimStatus","outputs":[{"name":"exists","type":"bool"},{"name":"status","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_previousPublishedVersion","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"hash","type":"bytes32"},{"indexed":false,"name":"status","type":"uint8"}],"name":"ClaimUpdated","type":"event"}]);
  var alastriaclaimregistry = alastriaclaimregistryContract.new(
     _previousPublishedVersion,
     {
       from: web3.eth.accounts[0],
       data: '0x6080604052608060405190810160405280600115151515815260200160001515151581526020016001151515158152602001600015151515815250600290600461004a92919061012b565b50608060405190810160405280600015151515815260200160011515151581526020016000151515158152602001600115151515815250600390600461009192919061012b565b506000600460006101000a81548160ff0219169083151502179055503480156100b957600080fd5b50604051602080610f8883398101806040528101908080519060200190929190505050600360008190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506101f4565b826004601f016020900481019282156101b35791602002820160005b8382111561018457835183826101000a81548160ff0219169083151502179055509260200192600101602081600001049283019260010302610147565b80156101b15782816101000a81549060ff0219169055600101602081600001049283019260010302610184565b505b5090506101c091906101c4565b5090565b6101f191905b808211156101ed57600081816101000a81549060ff0219169055506001016101ca565b5090565b90565b610d85806102036000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632711cd081461009e57806354fd4d50146100dc5780635c088f62146101075780636104464f1461014557806369b001151461019c57806379bea8031461021a578063b48000331461028d578063caa61e1214610304578063cabdb80a14610363575b600080fd5b3480156100aa57600080fd5b506100da6004803603810190808035600019169060200190929190803560ff1690602001909291905050506103e1565b005b3480156100e857600080fd5b506100f16105a8565b6040518082815260200191505060405180910390f35b34801561011357600080fd5b506101436004803603810190808035600019169060200190929190803560ff1690602001909291905050506105ae565b005b34801561015157600080fd5b5061015a610775565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101a857600080fd5b506101eb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560001916906020019092919050505061079b565b604051808315151515815260200182600381111561020557fe5b60ff1681526020019250505060405180910390f35b34801561022657600080fd5b5061022f610868565b6040518083815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561027857808201518184015260208101905061025d565b50505050905001935050505060405180910390f35b34801561029957600080fd5b506103026004803603810190808035600019169060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061094c565b005b34801561031057600080fd5b5061033f600480360381019080803560ff169060200190929190803560ff169060200190929190505050610b20565b6040518082600381111561034f57fe5b60ff16815260200191505060405180910390f35b34801561036f57600080fd5b506103b2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600019169060200190929190505050610be7565b60405180831515151581526020018260038111156103cc57fe5b60ff1681526020019250505060405180910390f35b600081600060038111156103f157fe5b8160038111156103fd57fe5b10158015610421575060038081111561041257fe5b81600381111561041e57fe5b11155b151561042c57600080fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085600019166000191681526020019081526020016000209150600460009054906101000a900460ff161580156104ca57508160000160019054906101000a900460ff1660038111156104bb57fe5b8360038111156104c757fe5b11155b156104d4576105a2565b60038360038111156104e257fe5b6004811015156104ee57fe5b602091828204019190069054906101000a900460ff16156105a15760018260000160006101000a81548160ff021916908315150217905550828260000160016101000a81548160ff0219169083600381111561054657fe5b02179055507fe8ee1e1e96b8e752674abef35c86d6a6616f9bbbe492a1fc706bb5ab7573024a848460405180836000191660001916815260200182600381111561058c57fe5b60ff1681526020019250505060405180910390a15b5b50505050565b60005481565b600081600060038111156105be57fe5b8160038111156105ca57fe5b101580156105ee57506003808111156105df57fe5b8160038111156105eb57fe5b11155b15156105f957600080fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000856000191660001916815260200190815260200160002091508160000160009054906101000a900460ff1615156106705761076f565b600460009054906101000a900460ff161580156106b457508160000160019054906101000a900460ff1660038111156106a557fe5b8360038111156106b157fe5b11155b156106be5761076f565b60028360038111156106cc57fe5b6004811015156106d857fe5b602091828204019190069054906101000a900460ff161561076e57828260000160016101000a81548160ff0219169083600381111561071357fe5b02179055507fe8ee1e1e96b8e752674abef35c86d6a6616f9bbbe492a1fc706bb5ab7573024a848460405180836000191660001916815260200182600381111561075957fe5b60ff1681526020019250505060405180910390a15b5b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600084600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156107dd57600080fd5b600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000866000191660001916815260200190815260200160002091508160000160009054906101000a900460ff168260000160019054906101000a900460ff169350935050509250929050565b60006060600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208080548060200260200160405190810160405280929190818152602001828054801561093d57602002820191906000526020600020905b81546000191681526020019060010190808311610925575b50505050509050915091509091565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836000191660001916815260200190815260200160002060000160009054906101000a900460ff161515156109c157600080fd5b606060405190810160405280600115158152602001600060038111156109e357fe5b815260200182815250600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846000191660001916815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690836003811115610a8857fe5b02179055506040820151816001019080519060200190610aa9929190610cb4565b50905050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208290806001815401808255809150509060018203906000526020600020016000909192909190915090600019169055505050565b60008260006003811115610b3057fe5b816003811115610b3c57fe5b10158015610b605750600380811115610b5157fe5b816003811115610b5d57fe5b11155b1515610b6b57600080fd5b8260006003811115610b7957fe5b816003811115610b8557fe5b10158015610ba95750600380811115610b9a57fe5b816003811115610ba657fe5b11155b1515610bb457600080fd5b836003811115610bc057fe5b856003811115610bcc57fe5b101515610bdb57849250610bdf565b8392505b505092915050565b600080600084600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610c2957600080fd5b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000866000191660001916815260200190815260200160002091508160000160009054906101000a900460ff168260000160019054906101000a900460ff169350935050509250929050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610cf557805160ff1916838001178555610d23565b82800160010185558215610d23579182015b82811115610d22578251825591602001919060010190610d07565b5b509050610d309190610d34565b5090565b610d5691905b80821115610d52576000816000905550600101610d3a565b5090565b905600a165627a7a72305820132d3c61b4148245dac1652ef3e9964f91e47559918d7f4dd2f4a55fffd1e68f0029',
       gas: '4700000'
     }, function (e, contract){
      console.log(e, contract);
      if (typeof contract.address !== 'undefined') {
           console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
      }
   })
}

//***************SUBJECT

export function set(address, dataHash, uri){
  var contract = bcWeb3.getContractInstance(claimRegistryAbi, String(address));
  contract.set(dataHash, uri, {from: web3.eth.defaultAccount, gas: 300000});
}

export function subjectUpdateClaim(address, dataHash, status){
  var contract = bcWeb3.getContractInstance(claimRegistryAbi, String(address));
  contract.subjectUpdateClaim(dataHash, status, {from: web3.eth.defaultAccount, gas: 300000});
}

export async function subjectClaimStatus(address, dataHash, subject){
  var contract = bcWeb3.getContractInstance(claimRegistryAbi, String(address));
  var response = await contract.subjectClaimStatus(subject, dataHash, {from: web3.eth.defaultAccount, gas: 300000});
  return response;
}

export async function subjectClaimList(address){
  var contract = bcWeb3.getContractInstance(claimRegistryAbi, String(address));
  var response = await contract.subjectClaimList({from: web3.eth.defaultAccount, gas: 300000});
  return response;
}

//*************RECEIVER

export function receiverUpdateClaim(address, dualHash, status){
  var contract = bcWeb3.getContractInstance(claimRegistryAbi, String(address));
  contract.receiverUpdateClaim(dualHash, status, {from: web3.eth.defaultAccount, gas: 300000});
}

export async function receiverClaimStatus(address, issuer, dualHash){
  var contract = bcWeb3.getContractInstance(claimRegistryAbi, String(address));
  var response = await contract.receiverClaimStatus(issuer, dualHash, {from: web3.eth.defaultAccount, gas: 300000});
  return response;
}

//**************UTILITY

export async function claimStatus(address, subjectStatus, receiverStatus){
  var contract = bcWeb3.getContractInstance(claimRegistryAbi, String(address));
  var response = await contract.claimStatus(subjectStatus, receiverStatus, {from: web3.eth.defaultAccount, gas: 300000});
  return response;
}
